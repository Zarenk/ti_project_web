from pathlib import Path

path = Path('fronted/src/app/dashboard/catalog/catalog-pdf.tsx')
data = path.read_text(encoding='utf-8')

old_block = """function CatalogPdfDocument({\n  sections,\n  coverImage,\n  title,\n  subtitle,\n}: {\n  sections: CatalogSection[]\n  coverImage?: string\n  title: string\n  subtitle: string\n}) {\n  const ITEMS_PER_PAGE = 9\n  const pages: { category: string; items: CatalogPdfItem[] }[] = []\n\n  for (const section of sections) {\n    const groups = chunk(section.items, ITEMS_PER_PAGE)\n    for (const items of groups) {\n      pages.push({ category: section.category, items })\n    }\n  }\n\n  return (\n    <Document>\n      {pages.map((page, index) => {\n        const isFirstPage = index === 0\n        const backgroundSrc = isFirstPage && coverImage ? coverImage : undefined\n\n        return (\n          <Page key={index} size=\"A4\" style={styles.page}>\n            {backgroundSrc && (\n              <View style={styles.pageBackgroundLayer}>\n                <PdfImage style={styles.pageBackground} src={backgroundSrc} />\n                <View style={styles.pageBackgroundOverlay} />\n              </View>\n            )}\n            <View style={styles.pageContent}>\n              {isFirstPage && (\n                <View style={styles.headerContainer}>\n                  <PdfImage style={styles.headerLogo} src='/ti_logo_final_2024.png' />\n                  <Text\n                    style={[\n                      styles.coverTitle,\n                      ...(backgroundSrc ? [styles.coverTitleOnImage] : []),\n                    ]}\n                  >\n                    {title}\n                  </Text>\n                  <Text\n                    style={[\n                      styles.coverSubtitle,\n                      ...(backgroundSrc ? [styles.coverSubtitleOnImage] : []),\n                    ]}\n                  >\n                    {subtitle}\n                  </Text>\n                </View>\n              )}\n              <Text\n                style={[\n                  styles.category,\n                  ...(backgroundSrc ? [styles.categoryCover] : []),\n                ]}\n              >\n                {page.category}\n              </Text>\n              <View\n                style={[\n                  styles.categorySeparator,\n                  ...(backgroundSrc ? [styles.categorySeparatorCover] : []),\n                ]}\n              />\n              <View style={styles.grid}>\n                {page.items.map((item, idx) => (\n                  <View key={idx} style={styles.item}>\n                    <PdfImage style={styles.companyLogo} src='/ti_logo_final_2024.png' />\n                    <View style={styles.imageWrapper}>\n                      {item.imageUrl ? (\n                        <PdfImage style={styles.image} src={item.imageUrl} />\n                      ) : (\n                        <Text style={styles.imagePlaceholder}>Imagen no disponible</Text>\n                      )}\n                    </View>\n                    <View style={styles.imageBadge}>\n                      <View style={[styles.badgeEdge, styles.badgeEdgeLeft]} />\n                      <View style={styles.badgeCenter}>\n                        <PdfImage style={styles.badgeLogo} src='/ti_logo_final_2024.png' />\n                        <Text style={styles.badgeText}>{TECH_LABEL}</Text>\n                      </View>\n                      <View style={[styles.badgeEdge, styles.badgeEdgeRight]} />\n                    </View>\n                    <Text style={styles.title}>{item.title}</Text>\n                    {item.description && (\n                      <Text style={styles.description}>{item.description}</Text>\n                    )}\n                    {item.price && <Text style={styles.price}>{item.price}</Text>}\n                    {item.specs && item.specs.length > 0 && (\n                      <View style={styles.specList}>\n                        {item.specs.map((spec, specIdx) => (\n                          <View key={specIdx} style={styles.specRow}>\n                            {renderSpecIcon(spec.key)}\n                            <Text style={styles.specText}>\n                              <Text style={styles.specLabel}>{spec.label}: </Text>\n                              {spec.value}\n                            </Text>\n                          </View>\n                        ))}\n                      </View>\n                    )}\n                    {item.logos && item.logos.length > 0 && (\n                      <View style={styles.logos}>\n                        {item.logos.map((logo, id) => (\n                          <PdfImage key={id} style={styles.logo} src={logo} />\n                        ))}\n                      </View>\n                    )}\n                  </View>\n                ))}\n              </View>\n            </View>\n          </Page>\n        )\n      })}\n    </Document>\n  )\n}\n"""

new_block = """function CatalogPdfDocument({\n  sections,\n  coverImage,\n  title,\n  subtitle,\n}: {\n  sections: CatalogSection[]\n  coverImage?: string\n  title: string\n  subtitle: string\n}) {\n  const ITEMS_PER_PAGE = 9\n  const pages: { category: string; items: CatalogPdfItem[] }[] = []\n\n  for (const section of sections) {\n    const groups = chunk(section.items, ITEMS_PER_PAGE)\n    for (const items of groups) {\n      pages.push({ category: section.category, items })\n    }\n  }\n\n  return (\n    <Document>\n      <Page key=\"cover\" size=\"A4\" style={styles.page}>\n        {coverImage && (\n          <View style={styles.pageBackgroundLayer}>\n            <PdfImage style={styles.pageBackground} src={coverImage} />\n            <View style={styles.pageBackgroundOverlay} />\n          </View>\n        )}\n        <View style={[styles.pageContent, styles.coverPageContent]}>\n          <PdfImage style={styles.coverLogo} src='/ti_logo_final_2024.png' />\n          <Text\n            style={[\n              styles.coverTitle,\n              ...(coverImage ? [styles.coverTitleOnImage] : []),\n            ]}\n          >\n            {title}\n          </Text>\n          <Text\n            style={[\n              styles.coverSubtitle,\n              ...(coverImage ? [styles.coverSubtitleOnImage] : []),\n            ]}\n          >\n            {subtitle}\n          </Text>\n          <Text\n            style={[\n              styles.coverTechLabel,\n              ...(coverImage ? [styles.coverTechLabelOnImage] : []),\n            ]}\n          >\n            {TECH_LABEL}\n          </Text>\n        </View>\n      </Page>\n      {pages.map((page, index) => (\n        <Page key={`page-${index}`} size=\"A4\" style={styles.page}>\n          <View style={styles.pageContent}>\n            <Text style={styles.category}>{page.category}</Text>\n            <View style={styles.categorySeparator} />\n            <View style={styles.grid}>\n              {page.items.map((item, idx) => (\n                <View key={idx} style={styles.item}>\n                  <PdfImage style={styles.companyLogo} src='/ti_logo_final_2024.png' />\n                  <View style={styles.imageWrapper}>\n                    {item.imageUrl ? (\n                      <PdfImage style={styles.image} src={item.imageUrl} />\n                    ) : (\n                      <Text style={styles.imagePlaceholder}>Imagen no disponible</Text>\n                    )}\n                  </View>\n                  <View style={styles.imageBadge}>\n                    <View style={[styles.badgeEdge, styles.badgeEdgeLeft]} />\n                    <View style={styles.badgeCenter}>\n                      <PdfImage style={styles.badgeLogo} src='/ti_logo_final_2024.png' />\n                      <Text style={styles.badgeText}>{TECH_LABEL}</Text>\n                    </View>\n                    <View style={[styles.badgeEdge, styles.badgeEdgeRight]} />\n                  </View>\n                  <Text style={styles.title}>{item.title}</Text>\n                  {item.description && (\n                    <Text style={styles.description}>{item.description}</Text>\n                  )}\n                  {item.price && <Text style={styles.price}>{item.price}</Text>}\n                  {item.specs && item.specs.length > 0 && (\n                    <View style={styles.specList}>\n                      {item.specs.map((spec, specIdx) => (\n                        <View key={specIdx} style={styles.specRow}>\n                          {renderSpecIcon(spec.key)}\n                          <Text style={styles.specText}>\n                            <Text style={styles.specLabel}>{spec.label}: </Text>\n                            {spec.value}\n                          </Text>\n                        </View>\n                      ))}\n                    </View>\n                  )}\n                  {item.logos && item.logos.length > 0 && (\n                    <View style={styles.logos}>\n                      {item.logos.map((logo, id) => (\n                        <PdfImage key={id} style={styles.logo} src={logo} />\n                      ))}\n                    </View>\n                  )}\n                </View>\n              ))}\n            </View>\n          </View>\n        </Page>\n      ))}\n    </Document>\n  )\n}\n"""

old_styles_snippet = "  pageContent: { position: 'relative', zIndex: 1, flex: 1, padding: 16 },\n  headerContainer: { alignItems: 'center', justifyContent: 'center', marginBottom: 12 },\n  headerLogo: { width: 56, height: 56, marginBottom: 8 },\n  coverTitle: { fontSize: 24, fontWeight: 'bold', textAlign: 'center', color: '#0f172a' },\n  coverTitleOnImage: { color: '#f8fafc' },\n  coverSubtitle: { fontSize: 12, textAlign: 'center', marginTop: 4, color: '#1f2937' },\n  coverSubtitleOnImage: { color: '#e2e8f0' },\n"

new_styles_snippet = "  pageContent: { position: 'relative', zIndex: 1, flex: 1, padding: 16 },\n  coverPageContent: { flex: 1, alignItems: 'center', justifyContent: 'center', paddingTop: 48, paddingBottom: 48 },\n  coverLogo: { width: 96, height: 96, marginBottom: 16 },\n  coverTechLabel: { fontSize: 12, textAlign: 'center', marginTop: 12, color: '#1f2937', letterSpacing: 1 },\n  coverTechLabelOnImage: { color: '#e2e8f0' },\n  headerContainer: { alignItems: 'center', justifyContent: 'center', marginBottom: 12 },\n  headerLogo: { width: 56, height: 56, marginBottom: 8 },\n  coverTitle: { fontSize: 24, fontWeight: 'bold', textAlign: 'center', color: '#0f172a' },\n  coverTitleOnImage: { color: '#f8fafc' },\n  coverSubtitle: { fontSize: 12, textAlign: 'center', marginTop: 4, color: '#1f2937' },\n  coverSubtitleOnImage: { color: '#e2e8f0' },\n"

old_title_block = "  const title = categoriesList\n    ? `CATALOGO DE ${categoriesList}`\n    : 'CATALOGO DE PRODUCTOS'\n  const subtitle = `${TECH_LABEL} - ${printedDate}`\n"

new_title_block = "  const categoriesDisplay = categoriesList || 'productos seleccionados'\n  const title = categoriesList\n    ? `Catalogo de \"${categoriesList}\"`\n    : 'Catalogo de productos'\n  const subtitle = `En la fecha ${printedDate}`\n"

if old_block not in data:
  raise SystemExit('Original block not found')

data = data.replace(old_block, new_block)

if old_styles_snippet not in data:
  raise SystemExit('Style snippet not found')

data = data.replace(old_styles_snippet, new_styles_snippet)

if old_title_block not in data:
  raise SystemExit('Title block not found')

data = data.replace(old_title_block, new_title_block)

path.write_text(data, encoding='utf-8')
